// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`source-map-loader should leave normal files untouched: css 1`] = `"without SourceMap"`;

exports[`source-map-loader should leave normal files untouched: errors 1`] = `Array []`;

exports[`source-map-loader should leave normal files untouched: warnings 1`] = `Array []`;

exports[`source-map-loader should leave normal files with fake source-map untouched: css 1`] = `
"// without SourceMap
anInvalidDirective = \\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\"+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+\\" */\\";
// comment
"
`;

exports[`source-map-loader should leave normal files with fake source-map untouched: errors 1`] = `Array []`;

exports[`source-map-loader should leave normal files with fake source-map untouched: warnings 1`] = `Array []`;

exports[`source-map-loader should process external SourceMaps (external sources): css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should process external SourceMaps (external sources): errors 1`] = `Array []`;

exports[`source-map-loader should process external SourceMaps (external sources): map 1`] = `
Object {
  "file": "external-source-map2.js",
  "mappings": "AAAA",
  "sources": Array [
    "/test/fixtures/external-source-map2.txt - (normalized for test)",
  ],
  "sourcesContent": Array [
    "with SourceMap",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should process external SourceMaps (external sources): warnings 1`] = `Array []`;

exports[`source-map-loader should process external SourceMaps: css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should process external SourceMaps: errors 1`] = `Array []`;

exports[`source-map-loader should process external SourceMaps: map 1`] = `
Object {
  "file": "external-source-map.js",
  "mappings": "AAAA",
  "sources": Array [
    "external-source-map.txt",
  ],
  "sourcesContent": Array [
    "with SourceMap",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should process external SourceMaps: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot find source file 'external-source-map.txt': Error: Can't resolve './external-source-map.txt' in '/test/fixtures'",
]
`;

exports[`source-map-loader should process inlined SourceMaps with charset: css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should process inlined SourceMaps with charset: errors 1`] = `Array []`;

exports[`source-map-loader should process inlined SourceMaps with charset: map 1`] = `
Object {
  "file": "charset-inline-source-map.js",
  "mappings": "AAAA",
  "sources": Array [
    "/test/fixtures/charset-inline-source-map.txt - (normalized for test)",
  ],
  "sourcesContent": Array [
    "with SourceMap",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should process inlined SourceMaps with charset: warnings 1`] = `Array []`;

exports[`source-map-loader should process inlined SourceMaps: css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should process inlined SourceMaps: errors 1`] = `Array []`;

exports[`source-map-loader should process inlined SourceMaps: map 1`] = `
Object {
  "file": "inline-source-map.js",
  "mappings": "AAAA",
  "sources": Array [
    "inline-source-map.txt",
  ],
  "sourcesContent": Array [
    "with SourceMap",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should process inlined SourceMaps: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot find source file 'inline-source-map.txt': Error: Can't resolve './inline-source-map.txt' in '/test/fixtures'",
]
`;

exports[`source-map-loader should reject http SourceMaps: css 1`] = `
"with SourceMap
//#sourceMappingURL=http://sampledomain.com/external-source-map2.map
// comment
"
`;

exports[`source-map-loader should reject http SourceMaps: errors 1`] = `Array []`;

exports[`source-map-loader should reject http SourceMaps: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) URL scheme not supported: http:",
]
`;

exports[`source-map-loader should reject not exist file: SourceMaps: errors 1`] = `Array []`;

exports[`source-map-loader should reject not exist file: SourceMaps: warnings 1`] = `"TypeError [ERR_INVALID_FILE"`;

exports[`source-map-loader should skip invalid base64 SourceMap: css 1`] = `
"without SourceMap
// @sourceMappingURL=data:application/source-map;base64,\\"something invalid\\"
// comment"
`;

exports[`source-map-loader should skip invalid base64 SourceMap: errors 1`] = `Array []`;

exports[`source-map-loader should skip invalid base64 SourceMap: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot parse inline SourceMap with Charset UTF-8: SyntaxError: Unexpected end of JSON input",
]
`;

exports[`source-map-loader should support absolute sourceRoot paths in sourcemaps: css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should support absolute sourceRoot paths in sourcemaps: errors 1`] = `Array []`;

exports[`source-map-loader should support absolute sourceRoot paths in sourcemaps: map 1`] = `
Object {
  "file": "absolute-sourceRoot-source-map.js",
  "mappings": "AAAA",
  "sources": Array [
    "/test/fixtures/absolute-sourceRoot-source-map.txt - (normalized for test)",
  ],
  "sourcesContent": Array [
    "with SourceMap
// comment",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should support absolute sourceRoot paths in sourcemaps: warnings 1`] = `Array []`;

exports[`source-map-loader should support indexed sourcemaps: css 1`] = `
"console.log('with SourceMap')
// Map taken from here
// https://github.com/mozilla/source-map/blob/master/test/util.js - indexedTestMapDifferentSourceRoots
"
`;

exports[`source-map-loader should support indexed sourcemaps: errors 1`] = `Array []`;

exports[`source-map-loader should support indexed sourcemaps: map 1`] = `
Object {
  "file": "file.js",
  "mappings": "CAAC,IAAI,IAAM,SAAU,GAClB,OAAO,IAAI;CCDb,IAAI,IAAM,SAAU,GAClB,OAAO",
  "names": Array [],
  "sources": Array [
    "/test/fixtures/indexed-sourcemap/nested1.js - (normalized for test)",
    "/different/root/nested2.js",
  ],
  "sourcesContent": Array [
    " ONE.foo = function (bar) {
   return baz(bar);
 };",
    " TWO.inc = function (n) {
   return n + 1;
 };",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should support indexed sourcemaps: warnings 1`] = `Array []`;

exports[`source-map-loader should support relative sourceRoot paths in sourcemaps: css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should support relative sourceRoot paths in sourcemaps: errors 1`] = `Array []`;

exports[`source-map-loader should support relative sourceRoot paths in sourcemaps: map 1`] = `
Object {
  "file": "relative-sourceRoot-source-map.js",
  "mappings": "AAAA",
  "sources": Array [
    "/test/fixtures/data/relative-sourceRoot-source-map.txt - (normalized for test)",
  ],
  "sourcesContent": Array [
    "with SourceMap
// comment",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should support relative sourceRoot paths in sourcemaps: warnings 1`] = `Array []`;

exports[`source-map-loader should use last SourceMap directive: css 1`] = `
"with SourceMap
anInvalidDirective = \\"\\\\n/*# sourceMappingURL=data:application/json;base64,\\"+btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))))+\\" */\\";
// comment"
`;

exports[`source-map-loader should use last SourceMap directive: errors 1`] = `Array []`;

exports[`source-map-loader should use last SourceMap directive: map 1`] = `
Object {
  "file": "inline-source-map.js",
  "mappings": "AAAA",
  "sources": Array [
    "inline-source-map.txt",
  ],
  "sourcesContent": Array [
    "with SourceMap",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should use last SourceMap directive: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot find source file 'inline-source-map.txt': Error: Can't resolve './inline-source-map.txt' in '/test/fixtures'",
]
`;

exports[`source-map-loader should warn on invalid SourceMap: css 1`] = `
"with SourceMap
//#sourceMappingURL=invalid-source-map.map
// comment"
`;

exports[`source-map-loader should warn on invalid SourceMap: errors 1`] = `Array []`;

exports[`source-map-loader should warn on invalid SourceMap: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot parse SourceMap 'invalid-source-map.map': SyntaxError: Unexpected string in JSON at position 102",
]
`;

exports[`source-map-loader should warn on invalid base64 SourceMap: css 1`] = `
"without SourceMap
// @sourceMappingURL=data:application/source-map;base64,invalid/base64=
// comment"
`;

exports[`source-map-loader should warn on invalid base64 SourceMap: errors 1`] = `Array []`;

exports[`source-map-loader should warn on invalid base64 SourceMap: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot parse inline SourceMap: data:application/source-map;base64,invalid/base64=",
]
`;

exports[`source-map-loader should warn on missing SourceMap: css 1`] = `
"with SourceMap
//#sourceMappingURL=missing-source-map.map
// comment"
`;

exports[`source-map-loader should warn on missing SourceMap: errors 1`] = `Array []`;

exports[`source-map-loader should warn on missing SourceMap: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot find SourceMap 'missing-source-map.map': Error: Can't resolve './missing-source-map.map' in '/test/fixtures'",
]
`;

exports[`source-map-loader should warn on missing source file: css 1`] = `
"with SourceMap
// comment"
`;

exports[`source-map-loader should warn on missing source file: errors 1`] = `Array []`;

exports[`source-map-loader should warn on missing source file: map 1`] = `
Object {
  "file": "missing-source-map2.js",
  "mappings": "AAAA",
  "sources": Array [
    "missing-source-map2.txt",
  ],
  "version": 3,
}
`;

exports[`source-map-loader should warn on missing source file: warnings 1`] = `
Array [
  "ModuleWarning: Module Warning (from \`replaced original path\`):
(Emitted value instead of an instance of Error) Cannot find source file 'missing-source-map2.txt': Error: Can't resolve './missing-source-map2.txt' in '/test/fixtures'",
]
`;
